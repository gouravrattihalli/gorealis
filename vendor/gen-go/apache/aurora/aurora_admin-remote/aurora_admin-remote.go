// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"apache/aurora"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  Response setQuota(string ownerRole, ResourceAggregate quota)")
	fmt.Fprintln(os.Stderr, "  Response forceTaskState(string taskId, ScheduleStatus status)")
	fmt.Fprintln(os.Stderr, "  Response performBackup()")
	fmt.Fprintln(os.Stderr, "  Response listBackups()")
	fmt.Fprintln(os.Stderr, "  Response stageRecovery(string backupId)")
	fmt.Fprintln(os.Stderr, "  Response queryRecovery(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response deleteRecoveryTasks(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response commitRecovery()")
	fmt.Fprintln(os.Stderr, "  Response unloadRecovery()")
	fmt.Fprintln(os.Stderr, "  Response startMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response drainHosts(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response maintenanceStatus(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response endMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response snapshot()")
	fmt.Fprintln(os.Stderr, "  Response rewriteConfigs(RewriteConfigsRequest request)")
	fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds)")
	fmt.Fprintln(os.Stderr, "  Response killTasks(JobKey job,  instances)")
	fmt.Fprintln(os.Stderr, "  Response addInstances(InstanceKey key, i32 count)")
	fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config)")
	fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
	fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
	fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
	fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
	fmt.Fprintln(os.Stderr, "  Response getTierConfigs()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := aurora.NewAuroraAdminClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "setQuota":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetQuota requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg336 := flag.Arg(2)
		mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
		defer mbTrans337.Close()
		_, err338 := mbTrans337.WriteString(arg336)
		if err338 != nil {
			Usage()
			return
		}
		factory339 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt340 := factory339.GetProtocol(mbTrans337)
		argvalue1 := aurora.NewResourceAggregate()
		err341 := argvalue1.Read(jsProt340)
		if err341 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetQuota(value0, value1))
		fmt.Print("\n")
		break
	case "forceTaskState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ForceTaskState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := aurora.ScheduleStatus(tmp1)
		value1 := argvalue1
		fmt.Print(client.ForceTaskState(value0, value1))
		fmt.Print("\n")
		break
	case "performBackup":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "PerformBackup requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.PerformBackup())
		fmt.Print("\n")
		break
	case "listBackups":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListBackups requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListBackups())
		fmt.Print("\n")
		break
	case "stageRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StageRecovery requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.StageRecovery(value0))
		fmt.Print("\n")
		break
	case "queryRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryRecovery requires 1 args")
			flag.Usage()
		}
		arg344 := flag.Arg(1)
		mbTrans345 := thrift.NewTMemoryBufferLen(len(arg344))
		defer mbTrans345.Close()
		_, err346 := mbTrans345.WriteString(arg344)
		if err346 != nil {
			Usage()
			return
		}
		factory347 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt348 := factory347.GetProtocol(mbTrans345)
		argvalue0 := aurora.NewTaskQuery()
		err349 := argvalue0.Read(jsProt348)
		if err349 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryRecovery(value0))
		fmt.Print("\n")
		break
	case "deleteRecoveryTasks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteRecoveryTasks requires 1 args")
			flag.Usage()
		}
		arg350 := flag.Arg(1)
		mbTrans351 := thrift.NewTMemoryBufferLen(len(arg350))
		defer mbTrans351.Close()
		_, err352 := mbTrans351.WriteString(arg350)
		if err352 != nil {
			Usage()
			return
		}
		factory353 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt354 := factory353.GetProtocol(mbTrans351)
		argvalue0 := aurora.NewTaskQuery()
		err355 := argvalue0.Read(jsProt354)
		if err355 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteRecoveryTasks(value0))
		fmt.Print("\n")
		break
	case "commitRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "CommitRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.CommitRecovery())
		fmt.Print("\n")
		break
	case "unloadRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "UnloadRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.UnloadRecovery())
		fmt.Print("\n")
		break
	case "startMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartMaintenance requires 1 args")
			flag.Usage()
		}
		arg356 := flag.Arg(1)
		mbTrans357 := thrift.NewTMemoryBufferLen(len(arg356))
		defer mbTrans357.Close()
		_, err358 := mbTrans357.WriteString(arg356)
		if err358 != nil {
			Usage()
			return
		}
		factory359 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt360 := factory359.GetProtocol(mbTrans357)
		argvalue0 := aurora.NewHosts()
		err361 := argvalue0.Read(jsProt360)
		if err361 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartMaintenance(value0))
		fmt.Print("\n")
		break
	case "drainHosts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DrainHosts requires 1 args")
			flag.Usage()
		}
		arg362 := flag.Arg(1)
		mbTrans363 := thrift.NewTMemoryBufferLen(len(arg362))
		defer mbTrans363.Close()
		_, err364 := mbTrans363.WriteString(arg362)
		if err364 != nil {
			Usage()
			return
		}
		factory365 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt366 := factory365.GetProtocol(mbTrans363)
		argvalue0 := aurora.NewHosts()
		err367 := argvalue0.Read(jsProt366)
		if err367 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DrainHosts(value0))
		fmt.Print("\n")
		break
	case "maintenanceStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MaintenanceStatus requires 1 args")
			flag.Usage()
		}
		arg368 := flag.Arg(1)
		mbTrans369 := thrift.NewTMemoryBufferLen(len(arg368))
		defer mbTrans369.Close()
		_, err370 := mbTrans369.WriteString(arg368)
		if err370 != nil {
			Usage()
			return
		}
		factory371 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt372 := factory371.GetProtocol(mbTrans369)
		argvalue0 := aurora.NewHosts()
		err373 := argvalue0.Read(jsProt372)
		if err373 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MaintenanceStatus(value0))
		fmt.Print("\n")
		break
	case "endMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EndMaintenance requires 1 args")
			flag.Usage()
		}
		arg374 := flag.Arg(1)
		mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
		defer mbTrans375.Close()
		_, err376 := mbTrans375.WriteString(arg374)
		if err376 != nil {
			Usage()
			return
		}
		factory377 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt378 := factory377.GetProtocol(mbTrans375)
		argvalue0 := aurora.NewHosts()
		err379 := argvalue0.Read(jsProt378)
		if err379 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.EndMaintenance(value0))
		fmt.Print("\n")
		break
	case "snapshot":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Snapshot requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Snapshot())
		fmt.Print("\n")
		break
	case "rewriteConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RewriteConfigs requires 1 args")
			flag.Usage()
		}
		arg380 := flag.Arg(1)
		mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
		defer mbTrans381.Close()
		_, err382 := mbTrans381.WriteString(arg380)
		if err382 != nil {
			Usage()
			return
		}
		factory383 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt384 := factory383.GetProtocol(mbTrans381)
		argvalue0 := aurora.NewRewriteConfigsRequest()
		err385 := argvalue0.Read(jsProt384)
		if err385 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RewriteConfigs(value0))
		fmt.Print("\n")
		break
	case "createJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateJob requires 1 args")
			flag.Usage()
		}
		arg386 := flag.Arg(1)
		mbTrans387 := thrift.NewTMemoryBufferLen(len(arg386))
		defer mbTrans387.Close()
		_, err388 := mbTrans387.WriteString(arg386)
		if err388 != nil {
			Usage()
			return
		}
		factory389 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt390 := factory389.GetProtocol(mbTrans387)
		argvalue0 := aurora.NewJobConfiguration()
		err391 := argvalue0.Read(jsProt390)
		if err391 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateJob(value0))
		fmt.Print("\n")
		break
	case "scheduleCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 1 args")
			flag.Usage()
		}
		arg392 := flag.Arg(1)
		mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
		defer mbTrans393.Close()
		_, err394 := mbTrans393.WriteString(arg392)
		if err394 != nil {
			Usage()
			return
		}
		factory395 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt396 := factory395.GetProtocol(mbTrans393)
		argvalue0 := aurora.NewJobConfiguration()
		err397 := argvalue0.Read(jsProt396)
		if err397 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ScheduleCronJob(value0))
		fmt.Print("\n")
		break
	case "descheduleCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 1 args")
			flag.Usage()
		}
		arg398 := flag.Arg(1)
		mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
		defer mbTrans399.Close()
		_, err400 := mbTrans399.WriteString(arg398)
		if err400 != nil {
			Usage()
			return
		}
		factory401 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt402 := factory401.GetProtocol(mbTrans399)
		argvalue0 := aurora.NewJobKey()
		err403 := argvalue0.Read(jsProt402)
		if err403 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescheduleCronJob(value0))
		fmt.Print("\n")
		break
	case "startCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
			flag.Usage()
		}
		arg404 := flag.Arg(1)
		mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
		defer mbTrans405.Close()
		_, err406 := mbTrans405.WriteString(arg404)
		if err406 != nil {
			Usage()
			return
		}
		factory407 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt408 := factory407.GetProtocol(mbTrans405)
		argvalue0 := aurora.NewJobKey()
		err409 := argvalue0.Read(jsProt408)
		if err409 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartCronJob(value0))
		fmt.Print("\n")
		break
	case "restartShards":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RestartShards requires 2 args")
			flag.Usage()
		}
		arg410 := flag.Arg(1)
		mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
		defer mbTrans411.Close()
		_, err412 := mbTrans411.WriteString(arg410)
		if err412 != nil {
			Usage()
			return
		}
		factory413 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt414 := factory413.GetProtocol(mbTrans411)
		argvalue0 := aurora.NewJobKey()
		err415 := argvalue0.Read(jsProt414)
		if err415 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg416 := flag.Arg(2)
		mbTrans417 := thrift.NewTMemoryBufferLen(len(arg416))
		defer mbTrans417.Close()
		_, err418 := mbTrans417.WriteString(arg416)
		if err418 != nil {
			Usage()
			return
		}
		factory419 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt420 := factory419.GetProtocol(mbTrans417)
		containerStruct1 := aurora.NewAuroraAdminRestartShardsArgs()
		err421 := containerStruct1.ReadField2(jsProt420)
		if err421 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ShardIds
		value1 := argvalue1
		fmt.Print(client.RestartShards(value0, value1))
		fmt.Print("\n")
		break
	case "killTasks":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "KillTasks requires 2 args")
			flag.Usage()
		}
		arg422 := flag.Arg(1)
		mbTrans423 := thrift.NewTMemoryBufferLen(len(arg422))
		defer mbTrans423.Close()
		_, err424 := mbTrans423.WriteString(arg422)
		if err424 != nil {
			Usage()
			return
		}
		factory425 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt426 := factory425.GetProtocol(mbTrans423)
		argvalue0 := aurora.NewJobKey()
		err427 := argvalue0.Read(jsProt426)
		if err427 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg428 := flag.Arg(2)
		mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
		defer mbTrans429.Close()
		_, err430 := mbTrans429.WriteString(arg428)
		if err430 != nil {
			Usage()
			return
		}
		factory431 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt432 := factory431.GetProtocol(mbTrans429)
		containerStruct1 := aurora.NewAuroraAdminKillTasksArgs()
		err433 := containerStruct1.ReadField2(jsProt432)
		if err433 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Instances
		value1 := argvalue1
		fmt.Print(client.KillTasks(value0, value1))
		fmt.Print("\n")
		break
	case "addInstances":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddInstances requires 2 args")
			flag.Usage()
		}
		arg434 := flag.Arg(1)
		mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
		defer mbTrans435.Close()
		_, err436 := mbTrans435.WriteString(arg434)
		if err436 != nil {
			Usage()
			return
		}
		factory437 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt438 := factory437.GetProtocol(mbTrans435)
		argvalue0 := aurora.NewInstanceKey()
		err439 := argvalue0.Read(jsProt438)
		if err439 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err440 := (strconv.Atoi(flag.Arg(2)))
		if err440 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.AddInstances(value0, value1))
		fmt.Print("\n")
		break
	case "replaceCronTemplate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 1 args")
			flag.Usage()
		}
		arg441 := flag.Arg(1)
		mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
		defer mbTrans442.Close()
		_, err443 := mbTrans442.WriteString(arg441)
		if err443 != nil {
			Usage()
			return
		}
		factory444 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt445 := factory444.GetProtocol(mbTrans442)
		argvalue0 := aurora.NewJobConfiguration()
		err446 := argvalue0.Read(jsProt445)
		if err446 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReplaceCronTemplate(value0))
		fmt.Print("\n")
		break
	case "startJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
			flag.Usage()
		}
		arg447 := flag.Arg(1)
		mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
		defer mbTrans448.Close()
		_, err449 := mbTrans448.WriteString(arg447)
		if err449 != nil {
			Usage()
			return
		}
		factory450 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt451 := factory450.GetProtocol(mbTrans448)
		argvalue0 := aurora.NewJobUpdateRequest()
		err452 := argvalue0.Read(jsProt451)
		if err452 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.StartJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pauseJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
			flag.Usage()
		}
		arg454 := flag.Arg(1)
		mbTrans455 := thrift.NewTMemoryBufferLen(len(arg454))
		defer mbTrans455.Close()
		_, err456 := mbTrans455.WriteString(arg454)
		if err456 != nil {
			Usage()
			return
		}
		factory457 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt458 := factory457.GetProtocol(mbTrans455)
		argvalue0 := aurora.NewJobUpdateKey()
		err459 := argvalue0.Read(jsProt458)
		if err459 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.PauseJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "resumeJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
			flag.Usage()
		}
		arg461 := flag.Arg(1)
		mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
		defer mbTrans462.Close()
		_, err463 := mbTrans462.WriteString(arg461)
		if err463 != nil {
			Usage()
			return
		}
		factory464 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt465 := factory464.GetProtocol(mbTrans462)
		argvalue0 := aurora.NewJobUpdateKey()
		err466 := argvalue0.Read(jsProt465)
		if err466 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ResumeJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "abortJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
			flag.Usage()
		}
		arg468 := flag.Arg(1)
		mbTrans469 := thrift.NewTMemoryBufferLen(len(arg468))
		defer mbTrans469.Close()
		_, err470 := mbTrans469.WriteString(arg468)
		if err470 != nil {
			Usage()
			return
		}
		factory471 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt472 := factory471.GetProtocol(mbTrans469)
		argvalue0 := aurora.NewJobUpdateKey()
		err473 := argvalue0.Read(jsProt472)
		if err473 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AbortJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pulseJobUpdate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
			flag.Usage()
		}
		arg475 := flag.Arg(1)
		mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
		defer mbTrans476.Close()
		_, err477 := mbTrans476.WriteString(arg475)
		if err477 != nil {
			Usage()
			return
		}
		factory478 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt479 := factory478.GetProtocol(mbTrans476)
		argvalue0 := aurora.NewJobUpdateKey()
		err480 := argvalue0.Read(jsProt479)
		if err480 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PulseJobUpdate(value0))
		fmt.Print("\n")
		break
	case "getRoleSummary":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleSummary())
		fmt.Print("\n")
		break
	case "getJobSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobSummary(value0))
		fmt.Print("\n")
		break
	case "getTasksStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
			flag.Usage()
		}
		arg482 := flag.Arg(1)
		mbTrans483 := thrift.NewTMemoryBufferLen(len(arg482))
		defer mbTrans483.Close()
		_, err484 := mbTrans483.WriteString(arg482)
		if err484 != nil {
			Usage()
			return
		}
		factory485 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt486 := factory485.GetProtocol(mbTrans483)
		argvalue0 := aurora.NewTaskQuery()
		err487 := argvalue0.Read(jsProt486)
		if err487 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksStatus(value0))
		fmt.Print("\n")
		break
	case "getTasksWithoutConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
			flag.Usage()
		}
		arg488 := flag.Arg(1)
		mbTrans489 := thrift.NewTMemoryBufferLen(len(arg488))
		defer mbTrans489.Close()
		_, err490 := mbTrans489.WriteString(arg488)
		if err490 != nil {
			Usage()
			return
		}
		factory491 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt492 := factory491.GetProtocol(mbTrans489)
		argvalue0 := aurora.NewTaskQuery()
		err493 := argvalue0.Read(jsProt492)
		if err493 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksWithoutConfigs(value0))
		fmt.Print("\n")
		break
	case "getPendingReason":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
			flag.Usage()
		}
		arg494 := flag.Arg(1)
		mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
		defer mbTrans495.Close()
		_, err496 := mbTrans495.WriteString(arg494)
		if err496 != nil {
			Usage()
			return
		}
		factory497 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt498 := factory497.GetProtocol(mbTrans495)
		argvalue0 := aurora.NewTaskQuery()
		err499 := argvalue0.Read(jsProt498)
		if err499 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPendingReason(value0))
		fmt.Print("\n")
		break
	case "getConfigSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
			flag.Usage()
		}
		arg500 := flag.Arg(1)
		mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
		defer mbTrans501.Close()
		_, err502 := mbTrans501.WriteString(arg500)
		if err502 != nil {
			Usage()
			return
		}
		factory503 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt504 := factory503.GetProtocol(mbTrans501)
		argvalue0 := aurora.NewJobKey()
		err505 := argvalue0.Read(jsProt504)
		if err505 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetConfigSummary(value0))
		fmt.Print("\n")
		break
	case "getJobs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobs(value0))
		fmt.Print("\n")
		break
	case "getQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetQuota(value0))
		fmt.Print("\n")
		break
	case "populateJobConfig":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
			flag.Usage()
		}
		arg508 := flag.Arg(1)
		mbTrans509 := thrift.NewTMemoryBufferLen(len(arg508))
		defer mbTrans509.Close()
		_, err510 := mbTrans509.WriteString(arg508)
		if err510 != nil {
			Usage()
			return
		}
		factory511 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt512 := factory511.GetProtocol(mbTrans509)
		argvalue0 := aurora.NewJobConfiguration()
		err513 := argvalue0.Read(jsProt512)
		if err513 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PopulateJobConfig(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateSummaries":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
			flag.Usage()
		}
		arg514 := flag.Arg(1)
		mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
		defer mbTrans515.Close()
		_, err516 := mbTrans515.WriteString(arg514)
		if err516 != nil {
			Usage()
			return
		}
		factory517 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt518 := factory517.GetProtocol(mbTrans515)
		argvalue0 := aurora.NewJobUpdateQuery()
		err519 := argvalue0.Read(jsProt518)
		if err519 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateSummaries(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDetails":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 1 args")
			flag.Usage()
		}
		arg520 := flag.Arg(1)
		mbTrans521 := thrift.NewTMemoryBufferLen(len(arg520))
		defer mbTrans521.Close()
		_, err522 := mbTrans521.WriteString(arg520)
		if err522 != nil {
			Usage()
			return
		}
		factory523 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt524 := factory523.GetProtocol(mbTrans521)
		argvalue0 := aurora.NewJobUpdateKey()
		err525 := argvalue0.Read(jsProt524)
		if err525 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDetails(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDiff":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
			flag.Usage()
		}
		arg526 := flag.Arg(1)
		mbTrans527 := thrift.NewTMemoryBufferLen(len(arg526))
		defer mbTrans527.Close()
		_, err528 := mbTrans527.WriteString(arg526)
		if err528 != nil {
			Usage()
			return
		}
		factory529 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt530 := factory529.GetProtocol(mbTrans527)
		argvalue0 := aurora.NewJobUpdateRequest()
		err531 := argvalue0.Read(jsProt530)
		if err531 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDiff(value0))
		fmt.Print("\n")
		break
	case "getTierConfigs":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetTierConfigs requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetTierConfigs())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
